{
  inputs = {
    # Package repositories
    chaotic.url = "github:chaotic-cx/nyx/nyxpkgs-unstable";

    nixpkgs.follows = "chaotic/nixpkgs";

    # Modules
    home-manager = {
      url = "github:nix-community/home-manager";

      follows = "chaotic/home-manager";

    };

    icedos-apps-0 = {
      url = "github:icedos/apps/4d59a111027a333f1526d03428f16f02300f9a65";
    };
    icedos-apps-zen-zen = {
      inputs = {
        nixpkgs = {
          follows = "nixpkgs";
        };
      };
      url = "github:0xc000022070/zen-browser-flake";
    };
    icedos-desktop-0 = {
      url = "github:icedos/desktop/8e76025d2bf063518366c7a764c41bb2b135dde6";
    };
    icedos-hardware-0 = {
      url = "github:icedos/hardware/8d054566e52efcf8f2ec0f6c59cc9e76e104f53e";
    };
    icedos-hyprland-0 = {
      url = "github:icedos/hyprland/9cf7fdff29d725832148040610da21363fe8c1c9";
    };
    icedos-tweaks-0 = {
      url = "github:icedos/tweaks/83d42744d78c418a259b8e1c4ae7eba1d3e9eaf5";
    };
    icedos-users-0 = {
      url = "github:icedos/users/9b3f4c83f7e67f62bf161644bb5d3d51fd6ea017";
    };

  };

  outputs =
    {
      home-manager,
      nixpkgs,
      self,
      chaotic,
      ...
    }@inputs:
    let
      system = "x86_64-linux";

      inherit (builtins) fromTOML;
      inherit (lib) fileContents flatten map;
      inherit (pkgs) lib;

      cfg = (fromTOML (fileContents ./config.toml)).icedos;
      pkgs = nixpkgs.legacyPackages.${system};

      icedosLib = import ./lib.nix {
        inherit lib pkgs inputs;
        config = cfg;
        self = ./.;
      };

      externalModulesOutputs = map icedosLib.getExternalModuleOutputs cfg.repositories;

      extraOptions = flatten (map (mod: mod.options) externalModulesOutputs);

      extraNixosModules = flatten (
        map (mod: mod.nixosModules { inherit inputs; }) externalModulesOutputs
      );
    in
    {
      apps.${system}.init = {
        type = "app";
        program = toString (with pkgs; writeShellScript "icedos-flake-init" "exit");
      };

      nixosConfigurations."icedos" = nixpkgs.lib.nixosSystem rec {
        specialArgs = {
          inherit icedosLib inputs;
        };

        modules = [
          # Read configuration location
          (
            { lib, ... }:
            let
              inherit (lib) mkOption types;
            in
            {
              options.icedos.configurationLocation = mkOption {
                type = types.str;
                default = "/home/icedborn/.code/icedos/core";
              };
            }
          )

          # Symlink configuration state on "/run/current-system/source"
          {
            # Source: https://github.com/NixOS/nixpkgs/blob/5e4fbfb6b3de1aa2872b76d49fafc942626e2add/nixos/modules/system/activation/top-level.nix#L191
            system.extraSystemBuilderCmds = "ln -s ${self} $out/source";
          }

          # Internal modules and config
          (
            { lib, ... }:
            let
              inherit (lib) filterAttrs;

              getModules =
                path:
                map (dir: "/${path}/${dir}") (
                  let
                    inherit (lib) attrNames;
                  in
                  attrNames (filterAttrs (n: v: v == "directory") (builtins.readDir path))
                );
            in
            {
              imports = [ ./options.nix ] ++ getModules ./.private;
              config.system.stateVersion = "23.05";
            }
          )

          # External modules
          chaotic.nixosModules.default

          home-manager.nixosModules.home-manager

          # Is First Build
          { icedos.system.isFirstBuild = false; }

          (
            # Do not modify this file!  It was generated by ‘nixos-generate-config’
            # and may be overwritten by future invocations.  Please make changes
            # to /etc/nixos/configuration.nix instead.
            {
              config,
              lib,
              pkgs,
              modulesPath,
              ...
            }:

            {
              imports = [
                (modulesPath + "/installer/scan/not-detected.nix")
              ];

              boot.initrd.availableKernelModules = [
                "nvme"
                "xhci_pci"
                "ahci"
                "usb_storage"
                "usbhid"
                "sd_mod"
              ];
              boot.initrd.kernelModules = [ ];
              boot.kernelModules = [ "kvm-amd" ];
              boot.extraModulePackages = [ ];
              boot.initrd.luks.devices."luks-8e034466-adc7-4f83-81cd-4ceb2397eb2d".device =
                "/dev/disk/by-uuid/8e034466-adc7-4f83-81cd-4ceb2397eb2d";

              fileSystems."/" = {
                device = "/dev/disk/by-uuid/e2a8d4bf-b1fc-446f-b347-c3671eda1ccb";
                fsType = "btrfs";
                options = [ "subvol=@" ];
              };

              boot.initrd.luks.devices."luks-ab2a2fb9-08aa-4c27-ab62-a1581a0113ff".device =
                "/dev/disk/by-uuid/ab2a2fb9-08aa-4c27-ab62-a1581a0113ff";

              fileSystems."/boot" = {
                device = "/dev/disk/by-uuid/1456-AC74";
                fsType = "vfat";
              };

              swapDevices = [
                { device = "/dev/disk/by-uuid/a642dc73-75f4-425f-8cc9-cbef30039563"; }
              ];

              # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
              # (the default) this is the recommended approach. When using systemd-networkd it's
              # still possible to use this option, but it's recommended to use it in conjunction
              # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
              networking.useDHCP = lib.mkDefault true;
              # networking.interfaces.enp9s0.useDHCP = lib.mkDefault true;

              nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
              hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
            }
          )

        ]
        ++ extraOptions
        ++ extraNixosModules;
      };
    };
}
